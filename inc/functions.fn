#!/bin/bash


###############################################################################
##  FONCTION usage()
##
##  Affiche les options et paramètres utilisables en ligne de commande
##
usage(){ 
    echo "Usage: ./script.sh [module] [options] \n" 
    echo "    [module] 						  executer uniquement le module spécifié"
    echo "    -p=[module], --bypass=[module]  ne pas executer tel script () "
    echo "                                    exemple -s=ftpsync pour passer directement au script suivant "
    echo "    -l=[speed], --limit=[speed]     régler une limitation de débit download en Ko/s pour la synchronisation ftp "
    echo "    -r=[time], --restart=[time]     régler le temps d'attente en heures avant restart (mode auto only) "    
    echo "	  -m, --mute 					  n'envoyer aucune notification"
    echo "    -a, --auto                      mode auto, aucune interaction de l'utilisateur nécessaire (pour auto-run) "
    echo "    -i, --interactive               mode manuel, demande plus de confirmations que par défaut "
    echo "    -t,, -s, --test, --sandbox      mode test, s'agit pas sur les fichiers (pas de conv ni suppression) "
    echo "    -h, --help                      afficher cette aide "
    exit 1  
} 


###############################################################################
##  FONCTION load_config()
##
##  Charge le fichier configuration ou affiche un message d'erreur si fichier absent
##
load_config() {
	if [ ! -f "$scriptpath/conf/config.conf" ]; then
		echo -e "\n\e[91m✖\e[0m Erreur: éditer le fichier de configuration et le renommer en config.conf \n"
		exit 0
	else
		source $scriptpath/conf/config.conf
		echo $CONFIG_LOADED
	fi
}
 

###############################################################################
##  FONCTION process_params()
##
##  Traitement des options et paramètres :
##		- gestion des modules bypassés
##		- remplacement de paramètre true/false
##
process_params() {

	if [ "$MOD_SKIP" != false ] ; then
		if [ "$MOD_SKIP" = "services" ] ; then RUN_SERVICES=false
		elif [ "$MOD_SKIP" = "checkdisk" ] ; then RUN_SERVICES=false ; RUN_CHECKDISK=false
		elif [ "$MOD_SKIP" = "ftpsync" ] ; then RUN_SERVICES=false ; RUN_CHECKDISK=false ; RUN_FTPSYNC=false
		elif [ "$MOD_SKIP" = "lossless" ] ; then RUN_SERVICES=false ; RUN_CHECKDISK=false ; RUN_FTPSYNC=false ; RUN_LOSSLESS=false
		elif [ "$MOD_SKIP" = "cuesplit" ] ; then RUN_SERVICES=false ; RUN_CHECKDISK=false ; RUN_FTPSYNC=false ; RUN_LOSSLESS=false ; RUN_CUESPLIT=false
		elif [ "$MOD_SKIP" = "grabber" ] ; then RUN_SERVICES=false ; RUN_CHECKDISK=false ; RUN_FTPSYNC=false ; RUN_LOSSLESS=false ; RUN_CUESPLIT=false ; RUN_GRABBER=false
		elif [ "$MOD_SKIP" = "cleanup" ] ; then RUN_SERVICES=false ; RUN_CHECKDISK=false ; RUN_FTPSYNC=false ; RUN_LOSSLESS=false ; RUN_CUESPLIT=false ; RUN_GRABBER=false ; RUN_CLEANUP=false	; fi
	fi
	set_speedlimit
}


###############################################################################
##  FONCTION check_params()
##
##  Afin d'éviter toute erreur voir suppression de fichiers, on vérifie
##  que la configuration est correcte avant l'execution des modules.
##
check_params() { # lance quelques vérifications des paramètres de lancement et interrompt l'execution du script en cas de problème

	# création des dossiers logs/ et conf/tograb/ si absents (première execution)
	if [ ! -d "$scriptpath/logs" ]; then mkdir -m 777 $scriptpath/logs ; fi
	if [ ! -d "$scriptpath/conf/tograb" ]; then mkdir -m 777 $scriptpath/conf/tograb ;   fi

	# création des fichiers todl-lists si absents
	if [ ! -f "$scriptpath/conf/tograb/todl.conf" ]; then cat /dev/null > $scriptpath/conf/tograb/todl.conf ; fi
	if [ ! -f "$scriptpath/conf/tograb/pls.conf" ]; then cat /dev/null > $scriptpath/conf/tograb/pls.conf ; fi
	if [ ! -f "$scriptpath/conf/tograb/mypls.conf" ]; then cat /dev/null > $scriptpath/conf/tograb/mypls.conf ; fi
	if [ ! -f "$scriptpath/conf/tograb/rss.conf" ]; then cat /dev/null > $scriptpath/conf/tograb/rss.conf ; fi

	# si aucun paramètre n'a été ajouté à la ligne de commande
	if [ "$defaultconfig" = true ] ; then
		echo -ne "\n\e[34m➤\e[0m Lancement du script avec paramètres par défaut"
		# sauf si le mode auto, on demande si on voir checker la config actuelle
		if [ "$AUTO_RUN" = false ] ; then
			read -n1 -r -p ". Vérifier la configuration actuelle ? (o/N) " key
		    if [[ $key =~ ^([oO])$ ]] ; then
		      echo -e "\n" 
		      echo "$( cat $scriptpath/conf/config.conf )"
		      echo ""
		      read -n1 -r -p "Poursuivre l'execution ? (O/n) " key
			    if [[ $key =~ ^([nN])$ ]] ; then
			      echo ""
			      exit 0
			    fi
		    fi
		fi
		echo ""
	else
		echo -ne "\n\e[34m➤\e[0m Lancement du script avec paramètres : $currentconfig \n"
		
	fi

	dependencies=(lftp mp3splt lame flac avconv curl youtube-dl)
	echo -e "\e[34m➤\e[0m Vérification des dépendances.."

	for dependency in "${dependencies[@]}" ; do
		which $dependency > /dev/null || { echo -e "\n   \e[34m➤\e[0m Installation de la dépendance $dependency \n" ; sudo apt-get install $dependency;}
	done

	echo -e "\e[34m➤\e[0m Vérification des paramètres..\n"
	validparams=1 # les paramètres et options sont valides, sauf :
	if [ ! -f "$scriptpath/inc/functions.fn" ]; then echo -e "   \e[91m✖\e[0m Fichier include des fonctions non trouvé" ; validparams=0 ; fi
	if [ ! -f "$scriptpath/conf/config.conf" ]; then echo -e "   \e[91m✖\e[0m Fichier de configuration non trouvé" ; validparams=0 ; fi
	if [ ! -w "$scriptpath/conf/tograb" ] ; then echo -e "   \e[91m✖\e[0m Le dossier $scriptpath/conf/tograb n'est pas accessible en écriture"; validparams=0 ; fi
	if [ ! -w "$scriptpath/logs" ] ; then echo -e "   \e[91m✖\e[0m Le dossier $scriptpath/logs n'est pas accessible en écriture"; validparams=0 ; fi
	if [ -z "$FTP_USER" ] || [ -z "$FTP_PWD" ] || [ -z "$FTP_HOST" ]; then echo -e "   \e[91m✖\e[0m Identifiants et serveur FTP non paramétrés" ; validparams=0 ; fi
	if [ -z "$FTP_REMOTE_DIR" ]; then echo -e "   \e[91m✖\e[0m Emplacement distant du FTP non paramétré" ; validparams=0 ; fi
	if [ ! -d "$FTP_LOCAL_DIR" ]; then echo -e "   \e[91m✖\e[0m Emplacement local pour synchro FTP inexistant : $FTP_LOCAL_DIR" ; validparams=0 ; fi
	if [ ! -d "$LOSSLESS_SOURCE_DIR" ]; then echo -e "   \e[91m✖\e[0m Emplacement source pour conversion audio inexistant : $LOSSLESS_SOURCE_DIR" ; validparams=0 ; fi
	if [ ! -d "$LOSSLESS_DEST_DIR" ]; then echo -e "   \e[91m✖\e[0m Emplacement de destination pour conversion audio inexistant : $LOSSLESS_DEST_DIR" ; validparams=0 ; fi
	if [ ! -d "$CUE_SOURCE_DIR" ]; then	echo -e "   \e[91m✖\e[0m Emplacement source pour split CUE inexistant : $CUE_SOURCE_DIR" ; validparams=0 ; fi
	if [ ! -d "$CUE_DEST_DIR" ]; then echo -e "   \e[91m✖\e[0m Emplacement de destination pour split CUE inexistant : $CUE_DEST_DIR" ; validparams=0 ;	fi
	if [ ! -d "$CLEANUP_DIR" ]; then echo -e "   \e[91m✖\e[0m Emplacement à nettoyer inexistant : $CLEANUP_DIR" ; validparams=0 ; fi
	if [ "$AUTO_RUN" = true ] && [ "$MANUAL_RUN" = true ] ; then echo -e "   \e[91m✖\e[0m Le mode automatique n'est pas compatible avec le mode interactif" ; validparams=0 ; fi
	if [ -z "$LOSSLESS_SOURCE_DIR" ]; then echo -e "   \e[91m✖\e[0m Emplacement source des lossless non paramétré" ; validparams=0 ; fi
	if [ -z "$LOSSLESS_DEST_DIR" ]; then echo -e "   \e[91m✖\e[0m Emplacement de destination des lossless non paramétré" ; validparams=0 ; fi
	if [ -z "$CUE_SOURCE_DIR" ]; then echo -e "   \e[91m✖\e[0m Emplacement source des CUE non paramétré" ; validparams=0 ; fi
	if [ -z "$CUE_DEST_DIR" ]; then echo -e "   \e[91m✖\e[0m Emplacement de destination des CUE non paramétré" ; validparams=0 ; fi
	if [ -z "$CLEANUP_DIR" ]; then echo -e "   \e[91m✖\e[0m Emplacement à nettoyer non paramétré" ; validparams=0 ; fi
	if [ -z "$CLEANUP_EXT" ]; then echo -e "   \e[91m✖\e[0m Types de fichier à nettoyer non paramétrés" ; validparams=0 ; fi
	if [ -z "$CLEANUP_NAME" ]; then	echo -e "   \e[91m✖\e[0m Noms de fichier à nettoyer non paramétrés" ; validparams=0 ; fi
	if [ -z "$LOCAL_DISKS" ]; then	echo -e "   \e[91m✖\e[0m Disque(s) locaux non paramétrés" ; validparams=0 ; fi
    if [ "$RUN_FTPSYNC" = false ] && [ "$RUN_LOSSLESS" = false ] && [ "$RUN_CUESPLIT" = false ] && [ "$RUN_CLEANUP" = false ] ; then echo -e "   \e[91m✖\e[0m Tous les modules ont été bypassés" ; validparams=0 ; fi

	if [ "$validparams" = 0 ] ; then echo ""   ; exit 0 # en cas d'erreur on stop l'execution du script
	else echo -e "   \e[32m✓\e[0m Aucun problème de configuration détecté" ; fi 
}	


###############################################################################
##  FONCTION echo_params()
##
##  Affiche dans le header le mode d'execution et les modules bypassés :
##
echo_params(){
	
	echo -n " MODE: "
	if [ "$AUTO_RUN" = true ] ; then echo -ne " \e[34mautomatique\e[0m " ; else echo -ne " \e[9mautomatique\e[0m " ; fi
	if [ "$AUTO_RUN" = true ] ; then echo -ne "("$AUTO_RESTART"h) " ; fi
	if [ "$MANUAL_RUN" = true ] ; then echo -ne " \e[34minteractif\e[0m " ; else echo -ne " \e[9minteractif\e[0m " ; fi	
	if [ "$SAND_BOX" = true ] ; then echo -ne " \e[34msandbox\e[0m " ; else echo -ne " \e[9msandbox\e[0m " ; fi	
	if [ "$AUTO_RUN" = false ] && [ "$MANUAL_RUN" = false ] && [ "$SAND_BOX" = false ] ; then echo -ne " \e[34mnormal\e[0m " ; else echo -ne " \e[9mnormal\e[0m " ; fi	
	echo ""
	if [ "$MOD_SKIP" != false ] ; then
		echo -n " MODULES: "
		if [ "$MOD_SKIP" = "services" ] ; then echo -e " \e[9mservices\e[0m > checkdisk > ftpsync > lossless > cuesplit > grabber > cleanup" ; fi
		if [ "$MOD_SKIP" = "checkdisk" ] ; then echo -e " \e[9mservices\e[0m > \e[9mcheckdisk\e[0m > ftpsync > lossless > cuesplit > grabber > cleanup" ; fi
		if [ "$MOD_SKIP" = "ftpsync" ] ; then echo -e " \e[9mservices\e[0m > \e[9mcheckdisk\e[0m > \e[9mftpsync\e[0m > lossless > cuesplit > grabber > cleanup" ; fi
		if [ "$MOD_SKIP" = "lossless" ] ; then echo -e " \e[9mservices\e[0m > \e[9mcheckdisk\e[0m > \e[9mftpsync\e[0m > \e[9mlossless\e[0m > cuesplit > grabber > cleanup" ; fi
		if [ "$MOD_SKIP" = "cuesplit" ] ; then echo -e " \e[9mservices\e[0m > \e[9mcheckdisk\e[0m > \e[9mftpsync\e[0m > \e[9mlossless\e[0m > \e[9mcuesplit\e[0m > grabber > cleanup" ; fi
		if [ "$MOD_SKIP" = "grabber" ] ; then echo -e " \e[9mservices\e[0m > \e[9mcheckdisk\e[0m > \e[9mftpsync\e[0m > \e[9mlossless\e[0m > \e[9mcuesplit\e[0m > \e[9mgrabber\e[0m > cleanup" ; fi
	fi
}


###############################################################################
##  FONCTION echo_log()
##
##  Ajoute une ligne dans le fichier log, l'affiche également si echo_log 1
##
echo_log() { # premier parametre 1 ou 2 pour afficher ou non dans le terminal
    echo "$(date +"%Y/%m/%d %H:%M:%S") / $currentscript > $2" >> $log_file
    if [[ $1 = 1 ]] ; then   # echo_log 1 "foo"  >> afficher dans le terminal
    	echo -e "$2"
    fi
}


###############################################################################
##  FONCTION lock_on() & lock_off()
##
##  Créé ou retire un fichier "lock" temporaire empêchant une seconde execution
##  du script en parallèle.
##
lock_on() {
	if [ "$SAND_BOX" = false ] ; then
		if [ -e /tmp/$1.lock ]
		then # si le lock existe, on stop l'execution du script
		  echo -e "\n\e[91m✖\e[0m Une instance de ce module est déja en cours de fonctionnement."
		  echo "Pour la terminer: rm -f /tmp/$1.lock"
		  echo ""
		  exit 0
		fi   
		echo_log 0 "Ajout du lock /tmp/$1.lock"
		touch /tmp/$1.lock # création du lock
	fi
}

lock_off() {
	if [ "$SAND_BOX" = false ] ; then
	    echo_log 0 "Suppression du lock /tmp/$1.lock"
	    rm -f /tmp/$1.lock
	fi
}


###############################################################################
##  FONCTION trap_on() & trap_off()
##
##  Ajoute et retire le trap (fonction d'annulation appelée lors d'un CTRL+C)
##
trap_on() {
    echo_log 0 "Suppression du trap pour $1.lock"
    trap 'cancel_module $1' SIGINT # en cas de CTRL+C 
}

trap_off() {
    echo_log 0 "Activation du trap pour $1.lock"
    trap 'echo "" | exit 0' SIGINT # annule le trap actif
}

###############################################################################
##  FONCTION exec_module() & run_module()
##
##  Confirme (exec_module), sauf en mode auto, l'execution du module (run_module) 
##
exec_module() {
	# si mode auto off ou interactif on, on demande si on doit executer le script suivant
	if [ "$MANUAL_RUN" = true ] ; then # si le mode interactif est pas actif
		echo -ne "\n\e[34m➤\e[0m Executer le module $1 ? "
	  read -n1 -r -p "(o/N) " key
	    if [[ $key =~ ^([oO])$ ]] ; then
	      run_module $1
	    fi
	else
		run_module $1
	fi
}

###############################################################################
##  FONCTION 
##
##  Executer le module
##
run_module() {
	echo -e "\n\e[34m➤\e[0m Lancement du module $1" 
	sleep 1
	trap_on $1
	lock_on $1 	
	source $scriptpath/modules/$1.sh
	trap_off $1 
	lock_off $1 
}


###############################################################################
##  FONCTION panic_button()
##
##  Commande de sortie si CTRL+C (trap)
##
panic_button() {
  echo ""
  echo ""
  echo -e "   \e[91m✖\e[0m Script interrompu par le module $1 $2"
  echo_log 0 "Script interrompue par le module $1 $2"
  exit_module $1
}



###############################################################################
##  FONCTION cancel_module()
##
##  Commande de sortie si CTRL+C (trap)
##
cancel_module() {
  echo ""
  echo ""
  echo -e "   \e[91m✖\e[0m Opération interrompue pendant l'execution du module $1"
  echo_log 0 "Opération interrompue par l'utilisateur pendant l'execution du module $1"
  exit_module $1
}


###############################################################################
##  FONCTION exit_module()
##
##  Supprime un lock et stop l'execution du script
##

exit_module() {
	if [ "$1" != "" ] ; then
	  lock_off $1
	  #echo "Suppression du lock $1"
	  echo""
	  exit
	else
		echo "ERREUR: appel de la fonction exit() sans paramètre de script = lock non effacé"
	fi
}



###############################################################################
##  FONCTION send_notif()
##
##  Envoi une notification à l'utilisateur selon les services activés dans la config
##
send_notif() {
	if [ "$MUTE_NOTIF" != true ] ; then

		if [ "$1" != "" ] && [ "$2" != "" ]; then 
			title="$1"
			content="$2"
			if [ "$NOTIF_PUSH" = true ] ; then 
				#echo "Notification via Pushbullet.."
				bash $scriptpath/inc/pushbullet.sh push $PUSH_DEST note "$title" "$content"
			fi
			if [ "$NOTIF_MAIL" = true ] ; then 
				echo $content | mail -s "$title" -aFrom:Seedbox.sh "$MAIL_DEST" 
			fi
		else
			echo "Erreur: paramètres manquants : send_notif($title,$content)"
		fi
	fi
}


###############################################################################
##  FONCTION restart_loop()
##
##  Appelée après les exécutions de tous les modules, relance automatiquement
##	le script si le mode automatique est actif.
##
restart_loop() {
	if [ "$AUTO_RUN" = true ] ; then
		echo -e "Prochaine exécution automatique dans : "
		trap 'exit 0' INT # arrêt de l'auto-restart en cas de CTRL+C
		time=$(show_time $((AUTO_RESTART*60*60)))
		countdown $time # temps d'attente avant auto-restart du script
		# notification optionnelle de lancement
		if [ "$RUN_NOTIF" = true ] ; then send_notif "Seedbox.sh" "$(date +"%H:%M") : Lancement du script" &> /dev/null ;	fi
		bash $scriptpath/start.sh $currentconfig # ré-execute le script avec les memes options
	else
		echo -e "Activer le mode automatique (-a) pour lancer l'auto-restart \n"
		exit 0
	fi
}


###############################################################################
##  FONCTION restart_loop()
##
##  Appelée après le téléchargement de chaque liste de fichiers, renommage
##  des fichiers pour compatibilité Plex (fichier .summary + format date)
##
video_rename() {
	if [ "$STREAM_FILENAME_RENAME" = true ]; then
		#echo -ne "\n     \e[34m➤\e[0m Renommage des fichiers pour compatibilité Plex \n"
		find $STREAM_DIR -name "*.description" -exec rename 's/\.description$/.summary/' '{}' \; &> /dev/null
		find $STREAM_DIR -exec rename -v 's/(\d{4})(\d{2})(\d{2})/$1-$2-$3/'  '{}' \; &> /dev/null
	fi
}

###############################################################################
##  FONCTION restart_loop()
##
##  Appelée après les exécutions de tous les modules, relance automatiquement
##	le script si le mode automatique est actif.
##
set_speedlimit() {
	if [ "$DL_SPEED_FORCE" != true ]; then
		H=$(date +%H)
		if (( 4 <= 10#$H && 10#$H < 9 )); then 
		    DL_SPEED=$DL_MAX_SPEED
		elif (( 9 <= 10#$H )); then 
		    DL_SPEED=$DL_MIN_SPEED
		else
		    DL_SPEED=$DL_MIN_SPEED
		fi
	fi
}

###############################################################################
##  FONCTION format_pourcent()
##
##  Ajoute de la couleur à l'affichage d'une valeur en pourcentage
##
format_pourcent() {
	pourcent_output="\e[32m$1 %\e[0m" # couleur de base : vert
	if [ $1 -ge 70 ] ; then
		pourcent_output="\e[93m$1 %\e[0m" # warning 1: jaune
	fi
	if [ $1 -ge 85 ] ; then
		pourcent_output="\e[95m$1 %\e[0m" # warning 2: magenta
	fi 
	if [ $1 -ge "${SPACE_ALERT::-1}   " ] ; then
		pourcent_output="\e[91m$1 %\e[0m" # space alert: rouge
	fi
	echo -ne $pourcent_output
}

###############################################################################
##  FONCTION get_filesize()
##
##  Récupère le poid d'un fichier (fournir path en paramètre)
##
get_filesize() {
	#ls -ltr "$1" > file_size.result
	#export file_size=`awk -F" " '{ print $5 }' file_size.result`
	file_size=`stat --printf="%s" "$1"`
	if [[ $file_size > 104857 ]]
	then
	  echo "`echo ${file_size}/1024/1024 | bc` Mo"
	fi
}



###############################################################################
##  FONCTION delete_lftp_temp()
##
##  Supprime les fichiers temporaires créé par LFTP (fichiers incomplets)
##
delete_lftp_temp() {
  files=$(find $FTP_LOCAL_DIR -type f -iname "*.lftp-pget-status" | wc -l)
  if [ "$files" -ge 1 ] ; then  
    echo_log 1 "Suppression de $files fichiers temporaires"
    find $FTP_LOCAL_DIR -name "*.lftp-pget-status" -type f -delete
  fi
}


###############################################################################
##  FONCTION count_ftp_files()
##
##  Compte le nombre de fichiers existants sur le serveur FTP
##
count_ftp_files() {
  count=`curl -l -s -u ${login}:${pass} ftp://${host}/${1} | wc -l `
  echo $count
}






###############################################################################
##  FONCTION error()
##
##  si le deuxième paramètre de start.sh ne correspond à aucun module existant
##
error(){ 
    echo -e "\n\e[91m✖\e[0m Option ou paramètre invalide: $opt \n" >&2 
    usage
    echo ""
} 


###############################################################################
##  FONCTION countdown()
##
##  affiche un compte à rebours à l'auto-restart du script
##
countdown() {

        local OLD_IFS="${IFS}"
        IFS=":"
        local ARR=( $1 )
        local SECONDS=$((  (ARR[0] * 60 * 60) + (ARR[1] * 60) + ARR[2]  ))
        local START=$(date +%s)
        local END=$((START + SECONDS))
        local CUR=$START

        while [[ $CUR -lt $END ]]
        do
                CUR=$(date +%s)
                LEFT=$((END-CUR))

                printf "\r%02d:%02d:%02d" \
                        $((LEFT/3600)) $(( (LEFT/60)%60)) $((LEFT%60))

                sleep 1
        done
        IFS="${OLD_IFS}"
        echo "        "
}

###############################################################################
##  FONCTION show_time()
##
##  converti un nombre de secondes (auto-restart) dans le format jj:hh:m::ss
##
show_time() {
    num=$1
    min=0
    hour=0
    if((num>59));then
        ((sec=num%60))
        ((num=num/60))
        if((num>59));then
            ((min=num%60))
            ((num=num/60))
            ((hour=num))
            
        else
            ((min=num))
        fi
    else
        ((sec=num))
    fi
    echo "$hour":"$min":"$sec"
}



###############################################################################
##  FONCTION checkdiff_lenth()
##
##  Utilisée par le module LOSSLESS après la conversion d'un fichier en MP3.
##  Vérifie les durées des deux fichiers audio pour déterminer si le fichier 
##  lossless a été entièrement converti.
##  Une différence peut être constatée même si le fichier a été encodé à 100%
##  d'où une variable d'ajustement de tolérance fixée par défaut à 2 secs.
##
checkdiff_length() {

	checkdifferror=0
	mp3valid=1

 	# différence en seconde à partir de laquelle on considère les 2 fichiers comme différents
 	lengthdifftoler=$LENGTH_TOLER

	# récupération des 2 paramètres (durée au format H:M:S / 00:00:00.00)
	flaclengthbrut="$1"
	mp3lengthbrut="$2"

	# on se débarrasse des décimales des secondes
	flaclengthbrut=${flaclengthbrut:0:$((${#flaclengthbrut}-3))}
	mp3lengthbrut=${mp3lengthbrut:0:$((${#mp3lengthbrut}-3))}

	# on découpe la durée formatée en h:m:s
	hflac=$(echo $flaclengthbrut | cut -d':' -f1)
	mflac=$(echo $flaclengthbrut | cut -d':' -f2)
	sflac=$(echo $flaclengthbrut | cut -d':' -f3)
	hmp3=$(echo $mp3lengthbrut | cut -d':' -f1)
	mmp3=$(echo $mp3lengthbrut | cut -d':' -f2)
	smp3=$(echo $mp3lengthbrut | cut -d':' -f3)

	# on regénère la durée formatée pour vérification
	flaclengthcheck="$hflac:$mflac:$sflac"
	mp3lengthcheck="$hmp3:$mmp3:$smp3"

	# on empeche les valeurs commençant par zero d'etre prise pour de l'octal
	hflac=$((10#$hflac))
	mflac=$((10#$mflac))	
	sflac=$((10#$sflac))
	hmp3=$((10#$hmp3))
	mmp3=$((10#$mmp3))
	smp3=$((10#$smp3))

	# on vérifie que la durée générée est la même que la durée initiale
	if [ "$mp3lengthcheck" = "$mp3lengthbrut" ] && [ "$flaclengthcheck" = "$flaclengthbrut" ] ; then

		# on calcule les durées en secondes et on les compares
		flaclengthsec=$(( $hflac *60 *60 + $mflac *60 + $sflac ))
		mp3lengthsec=$(( $hmp3 *60 *60 + $mmp3 *60 + $smp3 ))
		difflength=$(( $flaclengthsec - $mp3lengthsec ))  # var de sortie difflength = nb de sec de diff

		if [ "$difflength" -lt "$lengthdifftoler" ] ; then  # la diff constatée n'est pas plus grande que la diff tolérée (less than)
			#echo "Fonction ok - Durées ok ($flaclengthcheck / $mp3lengthcheck)"
			mp3valid=1
		else
			mp3valid=0
			#echo -n "Différence : $difflength - Tolérée : "
			#if [ "$difflength" -lt "$lengthdifftoler" ]; then
				#echo -n "oui "
			#else
				#echo -n "non "
			#fi
			#echo "(Tolérance paramétrée : $lengthdifftoler secondes)"
		fi
	else
		echo "ERREUR dans la fonction checkdiff_length"
		mp3valid=0
	fi

 }